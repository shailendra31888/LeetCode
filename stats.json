{"leetcode":{"easy":9,"hard":0,"medium":5,"shas":{"0283-move-zeroes":{"0283-move-zeroes.cpp":"b9ef7cb54ce40e08a4332e82f40adf021c4a511f","README.md":"28d20bb062aa7dc5a9395769b41f7a80a0378b71","difficulty":"easy"},"README.md":{"":"076702cbbfa9b366c122c88458253fd83fc9392e"},"0094-binary-tree-inorder-traversal":{"0094-binary-tree-inorder-traversal.java":"d060b822c23d84495aa72e4d215c567e66d02075","README.md":"bd34dc7858ef18ca0298bb98d645a48123cf98b8","difficulty":"easy"},"stats.json":{"":"18dfcfaf34d38b0f3bb7072b3ed9df600676c0df"},"0100-same-tree":{"0100-same-tree.java":"d7763de4f308567d66332f9963ea3b4ea5a6fcd6","README.md":"e68046f2dc906bcd38453dd92eec5c257d4694a9","difficulty":"easy"},"0144-binary-tree-preorder-traversal":{"0144-binary-tree-preorder-traversal.java":"7c19b3c86215752bc8b5b071b8cfe9a7a1e85dc2","README.md":"2a9e1c4d5b165cf7667739cb5cd3e9fde9b49315","difficulty":"easy"},"0112-path-sum":{"0112-path-sum.java":"e27e77b6a73bbf21da83c20c59e81244a96845bf","README.md":"8d08359f1f01e0fd516d9c4adaaf2d04ab4f455e","difficulty":"easy"},"0103-binary-tree-zigzag-level-order-traversal":{"0103-binary-tree-zigzag-level-order-traversal.java":"ea4f45430b544ff1288bf96d168e435ea258554a","README.md":"fcd20aa2bad60f78f450527d135d90bfbc83d83a","difficulty":"medium"},"0110-balanced-binary-tree":{"0110-balanced-binary-tree.java":"937643457f10f59c9d69d7fb1e7e364a84ca48ea","README.md":"1496517dcf0faedc819cbdf10d07de1900d95d9c","difficulty":"easy"},"0222-count-complete-tree-nodes":{"0222-count-complete-tree-nodes.java":"a2a4fd724b0d006e8fffdc13f52b7589f9427057","README.md":"b5d031e0d7cc7a1abf0b398a1344396508c657c2","difficulty":"easy"},"0111-minimum-depth-of-binary-tree":{"0111-minimum-depth-of-binary-tree.java":"164da574cd2dc7211610521fb295553f0240e082","README.md":"ef874e714bbcb62cf96d64acfc0b679559ce9d2f","difficulty":"easy"},"0104-maximum-depth-of-binary-tree":{"0104-maximum-depth-of-binary-tree.java":"8ed09dc8e7d92e54d009b4d919cc2eb4f9b83beb","README.md":"3e88d40eac7067a0b69cceb90c76020b6f152ae0","difficulty":"easy"},"0106-construct-binary-tree-from-inorder-and-postorder-traversal":{"0106-construct-binary-tree-from-inorder-and-postorder-traversal.java":"8b5ba4d73d8107899100ebe0d11f215bdd8af6e2","README.md":"8169bc76429370954eb33bb078940c0a05066e29","difficulty":"medium"},"0105-construct-binary-tree-from-preorder-and-inorder-traversal":{"0105-construct-binary-tree-from-preorder-and-inorder-traversal.java":"4f395cd94b867ab9c6fa3faf52d39f2bcad8c005","README.md":"75ac83be2e52aa76ea9bd5c9c20537a499cb9ec0","difficulty":"medium"},"0102-binary-tree-level-order-traversal":{"0102-binary-tree-level-order-traversal.java":"18811506f51c0d205cc345df830bacbe0bf966dd","README.md":"01b65fdfcb1f1937ab9e22e5e3338d581c1423eb","difficulty":"medium"},"0108-convert-sorted-array-to-binary-search-tree":{"0108-convert-sorted-array-to-binary-search-tree.java":"782cd853dc1517244cd68ee76528afa1b37f48f8","README.md":"243a2859e66a71742146af16ea68ff0ab438a502"},"0145-binary-tree-postorder-traversal":{"0145-binary-tree-postorder-traversal.java":"66240750cefdd9a7e4088b25687d7c14271a163b","README.md":"ac6ce4de8f4a2a59c2b312532094616b3d3c85b7"},"0107-binary-tree-level-order-traversal-ii":{"0107-binary-tree-level-order-traversal-ii.java":"6f6260df734643a75aafe5b1d6d0527bd452b79d","README.md":"19e5c63e3d048778c7c65943bcec247adaad1d21","difficulty":"medium"}},"solved":14}}